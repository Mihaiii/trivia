import os

# HOW MUCH TIME USERS HAVE TO ANSWER THE QUESTION? IN PROD WILL PROBABLY BE 18 or 20.
QUESTION_COUNTDOWN_SEC = os.environ.get("QUESTION_COUNTDOWN_SEC")
if not QUESTION_COUNTDOWN_SEC:
    QUESTION_COUNTDOWN_SEC = 22
else:
    QUESTION_COUNTDOWN_SEC = int(os.environ.get("QUESTION_COUNTDOWN_SEC")) 
        
# NUMBER OF SECONDS TO KEEP THE FAILED TOPIC IN THE UI (USER INTERFACE) BEFORE REMOVING IT FROM THE LIST
KEEP_FAILED_TOPIC_SEC = os.environ.get("KEEP_FAILED_TOPIC_SEC")
if not KEEP_FAILED_TOPIC_SEC:
    KEEP_FAILED_TOPIC_SEC = 5
else:
    KEEP_FAILED_TOPIC_SEC = int(os.environ.get("KEEP_FAILED_TOPIC_SEC")) 
        
# DON'T ALLOW USER TO WRITE LONG TOPICS
MAX_TOPIC_LENGTH_CHARS = os.environ.get("MAX_TOPIC_LENGTH_CHARS")
if not MAX_TOPIC_LENGTH_CHARS:
    MAX_TOPIC_LENGTH_CHARS = 30
else:
    MAX_TOPIC_LENGTH_CHARS = int(os.environ.get("MAX_TOPIC_LENGTH_CHARS"))
    
# AUTOMATICALLY ADD TOPICS IF THE USERS DON'T BID/PROPOSE NEW ONES
MAX_NR_TOPICS_FOR_ALLOW_MORE = os.environ.get("MAX_NR_TOPICS_FOR_ALLOW_MORE")
if not MAX_NR_TOPICS_FOR_ALLOW_MORE:
    MAX_NR_TOPICS_FOR_ALLOW_MORE = 6
else:
    MAX_NR_TOPICS_FOR_ALLOW_MORE = int(os.environ.get("MAX_NR_TOPICS_FOR_ALLOW_MORE"))

# NUMBER OF TOPICS TO APPEAR IN THE UI. THE ACTUAL LIST CAN CONTAIN MORE THAN THIS.
NR_TOPICS_TO_BROADCAST = os.environ.get("NR_TOPICS_TO_BROADCAST")
if not NR_TOPICS_TO_BROADCAST:
    NR_TOPICS_TO_BROADCAST = 5
else:
    NR_TOPICS_TO_BROADCAST = int(os.environ.get("NR_TOPICS_TO_BROADCAST"))

# MINIMUM NUMBER OF POINTS REQUIRED TO PLACE A TOPIC BID IN THE UI
BID_MIN_POINTS = os.environ.get("BID_MIN_POINTS")
if not BID_MIN_POINTS:
    BID_MIN_POINTS = 3
else:
    BID_MIN_POINTS = int(os.environ.get("BID_MIN_POINTS"))
    
# MAX LENGTH OF THE USER PROVIDED TOPIC (WE REDUCE MALICIOUS INPUT)
TOPIC_MAX_LENGTH = os.environ.get("TOPIC_MAX_LENGTH")
if not TOPIC_MAX_LENGTH:
    TOPIC_MAX_LENGTH = 25
else:
    TOPIC_MAX_LENGTH = int(os.environ.get("TOPIC_MAX_LENGTH"))
        
MAX_NR_TOPICS = os.environ.get("MAX_NR_TOPICS")
if not MAX_NR_TOPICS:
    MAX_NR_TOPICS = 20
else:
    MAX_NR_TOPICS = int(os.environ.get("MAX_NR_TOPICS"))
    
DUPLICATE_TOPIC_THRESHOLD = os.environ.get("DUPLICATE_TOPIC_THRESHOLD")
if not DUPLICATE_TOPIC_THRESHOLD:
    DUPLICATE_TOPIC_THRESHOLD = 0.9
else:
    DUPLICATE_TOPIC_THRESHOLD = int(os.environ.get("DUPLICATE_TOPIC_THRESHOLD"))

#How many consecutive question does a user have to answer in order to win combo points?
COMBO_CONSECUTIVE_NR_FOR_WIN = os.environ.get("COMBO_CONSECUTIVE_NR_FOR_WIN")
if not COMBO_CONSECUTIVE_NR_FOR_WIN:
    COMBO_CONSECUTIVE_NR_FOR_WIN = 3
else:
    COMBO_CONSECUTIVE_NR_FOR_WIN = int(os.environ.get("COMBO_CONSECUTIVE_NR_FOR_WIN"))

#How many points does a combo bonus offer?
COMBO_WIN_POINTS = os.environ.get("COMBO_WIN_POINTS")
if not COMBO_WIN_POINTS:
    COMBO_WIN_POINTS = 50
else:
    COMBO_WIN_POINTS = int(os.environ.get("COMBO_WIN_POINTS"))

HF_CLIENT_ID = os.environ.get("HF_CLIENT_ID")
HF_CLIENT_SECRET = os.environ.get("HF_CLIENT_SECRET")
HF_REDIRECT_URI = os.environ.get("HF_REDIRECT_URI")

GOOGLE_CLIENT_ID = os.environ.get("GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.environ.get("GOOGLE_CLIENT_SECRET")
GOOGLE_REDIRECT_URI = os.environ.get("GOOGLE_REDIRECT_URI")

DB_DIRECTORY = os.environ.get("DB_DIRECTORY")

if not DB_DIRECTORY:
    DB_DIRECTORY = ""